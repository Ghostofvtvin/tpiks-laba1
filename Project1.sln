#include <iostream>
using namespace std;

class City {
private:
    int residential_buildings;
    int industrial_building;
    int unique_buildings;
    int park;
    int store;

public:
    // Конструктор
    City(int res_buildings, int ind_building, int uniq_buildings, int parks, int stores) {
        residential_buildings = res_buildings;
        industrial_building = ind_building;
        unique_buildings = uniq_buildings;
        park = parks;
        store = stores;
    }

    // Метод расчета уровня развития города
    double calculateDevelopmentLevel() {
        // Проверка на нулевые значения
        if (residential_buildings == 0 || industrial_building == 0 || unique_buildings == 0) {
            cout << "Уровень развития города равен нулю." << endl;
            return 0;
        }

        // Основная формула расчета уровня развития города
        double development_level = ((residential_buildings * (industrial_building + park + store) - residential_buildings)
            * ((unique_buildings + park + store) / (double)industrial_building));

        return development_level;
    }
};

int main() {
    setlocale(LC_ALL, "russian");
    // Ввод данных для города
    int residential_buildings, industrial_building, unique_buildings, park, store;

    cout << "Введите количество жилых зданий: ";
    cin >> residential_buildings;

    cout << "Введите количество промышленных зданий: ";
    cin >> industrial_building;

    cout << "Введите количество уникальных зданий: ";
    cin >> unique_buildings;

    cout << "Введите количество парков: ";
    cin >> park;

    cout << "Введите количество магазинов: ";
    cin >> store;

    // Создаем объект класса City
    City city(residential_buildings, industrial_building, unique_buildings, park, store);

    // Расчет уровня развития
    double development_level = city.calculateDevelopmentLevel();

    if (development_level > 0) {
        cout << "Уровень развития города Racun City: " << development_level << endl;
    }

    return 0;
}
